name: Build

on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

jobs:
  # fail fast and early to avoid clogging GH Actions
  smoke_testing:
    runs-on: ubuntu-20.04
    name: Smoke Testing
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt install libgl1-mesa-glx

      - name: Build and validate sdist
        run: |
          pip install twine
          pip install -r requirements_build.txt
          python setup.py sdist
          twine check dist/*

      - name: Build and validate sdist
        run: |
          pip install twine
          python setup.py sdist
          twine check dist/*

      - name: Install
        run: pip install dist/*

      - name: Install test dependencies
        run: xvfb-run pip install -r requirements_test.txt

      - name: Test
        run: |
          cd tests
          pytest -v

  docs_build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: smoke_testing

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt install libgl1-mesa-glx xvfb

      - name: Install ansys-mapdl-core
        run: |
          pip install -r requirements_build.txt
          pip install .

      - name: Build Documentation
        run: |
          pip install -r requirements_docs.txt
          xvfb-run make -C doc html

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@4.1.5
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: doc/build/html

  build_wheels:
    needs: [smoke_testing, docs_build]
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-10.15]

    steps:
      - uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.1.1

      # We need docker's cross architecture emulation to build ARM wheels.
      - if: startsWith(matrix.os, 'ubuntu')
        uses: crazy-max/ghaction-docker-buildx@v3.3.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # Configuration is passed via environment variables. See
        # https://cibuildwheel.readthedocs.io/en/stable/options/
        env:
          # Platform options
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6,<3.10"
          CIBW_SKIP: "pp*"  # Skip PyPy.
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          # Build options
          CIBW_BEFORE_BUILD: pip install -r requirements_build.txt
          CIBW_TEST_COMMAND: python -c "import fast_simplification"

  release:
    # if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: build_wheels
    name: Release
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      # this downloads all artifacts
      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Build the sdist
        run: |
          python setup.py sdist

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
